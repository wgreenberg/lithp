(define (caar obj) (car (car obj)))
(define (cadr obj) (car (cdr obj)))
(define (cdar obj) (cdr (car obj)))
(define (cddr obj) (cdr (cdr obj)))
(define (caaar obj) (car (car (car obj))))
(define (caadr obj) (car (car (cdr obj))))
(define (cadar obj) (car (cdr (car obj))))
(define (caddr obj) (car (cdr (cdr obj))))
(define (cdaar obj) (cdr (car (car obj))))
(define (cdadr obj) (cdr (car (cdr obj))))
(define (cddar obj) (cdr (cdr (car obj))))
(define (cdddr obj) (cdr (cdr (cdr obj))))
(define (caaaar obj) (car (car (car obj))))
(define (caaadr obj) (car (car (cdr obj))))
(define (caadar obj) (car (cdr (car obj))))
(define (caaddr obj) (car (cdr (cdr obj))))
(define (cadaar obj) (cdr (car (car obj))))
(define (cadadr obj) (cdr (car (cdr obj))))
(define (caddar obj) (cdr (cdr (car obj))))
(define (cadddr obj) (cdr (cdr (cdr obj))))
(define (cdaaar obj) (car (car (car obj))))
(define (cdaadr obj) (car (car (cdr obj))))
(define (cdadar obj) (car (cdr (car obj))))
(define (cdaddr obj) (car (cdr (cdr obj))))
(define (cddaar obj) (cdr (car (car obj))))
(define (cddadr obj) (cdr (car (cdr obj))))
(define (cdddar obj) (cdr (cdr (car obj))))
(define (cddddr obj) (cdr (cdr (cdr obj))))

(define (reverse-helper head rest)
    (cond ((= (length head) 1) (cons (car head) rest))
          (else (reverse-helper (cdr head) (cons (car head) rest)))))
(define (reverse list)
    (cond ((<= (length list) 1) list)
          (else (reverse-helper list '()))))

(define (gcd a b)
  (cond ((= b 0) a)
        (else (gcd b (remainder a b)))))

; dumb home-brewed rational number system since lithp only supports ints
(define rational (string->symbol "rational"))
(define (/ a b) (list 'rational a b))
(define (is-rational a) (eq? 'rational (car a)))
(define numerator cadr)
(define denominator caddr)
(define (inverse a) (/ (denominator a) (numerator a)))
(define (simplify a)
  (let ((gcd (gcd (numerator a) (denominator a))))
    (cond ((= gcd 1) a)
          (else
            (/ (quotient (numerator a) gcd)
               (quotient (denominator a) gcd))))))
(define (add-rational a b)
  (let ((c (/ (* (numerator b) (denominator a))
              (* (denominator b) (denominator a))))
        (d (/ (* (numerator a) (denominator b))
              (* (denominator a) (denominator b)))))
    (simplify (/ (+ (numerator c) (numerator d))
                 (denominator c)))))
(define (mult-rational a b)
  (simplify (/ (* (numerator a) (numerator b))
               (* (denominator a) (denominator b)))))
(define (div-rational a b) (mult-rational a (inverse b)))
